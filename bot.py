import telebot
from telebot import types
import random
import os

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
bot = telebot.TeleBot(TOKEN)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –°–ø–∏—Å–æ–∫ ID —Å—Ç–∏–∫–µ—Ä–æ–≤ —Å –ø–æ—Ö–≤–∞–ª–æ–π
praise_stickers = [
    'CAACAgIAAxkBAAEICjZmzjQgDJ0dcXz7nunXQk1jLLYPdQACDhsAApwiuEkaScQf14vkKzUE',
    'CAACAgIAAxkBAAEIClxmzjbcOWPBbtVWwwJik-zx4oB7ZAAC4RUAArRM2EnZ3DPB3rAICDUE',
    'CAACAgIAAxkBAAEICl5mzjcLVSLr3I2bJv4UWETYYX0uIgAC6yMAAj_lAUl35ZIodwxRkzUE',
    'CAACAgIAAxkBAAEIC1Rmzrbw_JA70hUz5_BWRcRk0UYyygACKAADobYRCH5VjnpjDnyLNQQ',
    'CAACAgIAAxkBAAEIC1Zmzrb-Krn9a0dIojZcmTZQCQS78gACIQADobYRCLB2DtJROSocNQQ',
    'CAACAgIAAxkBAAEIC1hmzrcq0eyW2GOwhU_eqBWEI7mbqAAC_xUAAgd-mEgrOaYxLXYgcDUE',
    'CAACAgIAAxkBAAEIC1pmzrdLhmxoeY7sk4cwNo9fvk-qWgAC4BkAAgWGEUsQOIwgB92ENjUE',
    'CAACAgIAAxkBAAEIC1xmzreB43ysBA0V2_467G1ye3hJ0wACEgADsND4DJVGMt3eogspNQQ',
    'CAACAgQAAxkBAAEIC15mzreS5gMCTuhaMEmZa8wxeZenfgAClwADzjkIDUAhLnyAYFYaNQQ',
    'CAACAgIAAxkBAAEIC2Jmzrfx8q8k7P60DIBDzYjivTJU5gACqwIAAhxxMAKXUlbZPNg4ajUE',
    'CAACAgIAAxkBAAEIC2Rmzrgsn-3ZxgLAU-cDLcNmS_O8awAC9wgAAhhC7gjpheyLD1rqiTUE',
    'CAACAgQAAxkBAAEIC15mzreS5gMCTuhaMEmZa8wxeZenfgAClwADzjkIDUAhLnyAYFYaNQQ',
    'CAACAgIAAxkBAAEIC1JmzrbP3lb6jnPAI5QeO6YP53tayQACEQADobYRCIFNsq5T0aHMNQQ'
]

def generate_question(difficulty=1):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    a = random.randint(2, 9 * difficulty)
    b = random.randint(2, 9 * difficulty)
    correct_answer = a * b
    options = [correct_answer]
    while len(options) < 4:
        wrong_answer = random.randint(max(2, correct_answer - 10), correct_answer + 10)
        if wrong_answer != correct_answer and wrong_answer not in options:
            options.append(wrong_answer)
    random.shuffle(options)
    return f"{a} √ó {b}", correct_answer, options

def get_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add(types.KeyboardButton('–ò–≥—Ä–∞—Ç—å'), types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
    keyboard.add(types.KeyboardButton('–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'))
    return keyboard

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data[message.chat.id] = {
        "score": 0,
        "max_score": 0,
        "current_streak": 0,
        "difficulty": 1
    }
    bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É —É–º–Ω–æ–∂–µ–Ω–∏—è!", reply_markup=get_main_keyboard())

@bot.message_handler(func=lambda message: message.text == '–ò–≥—Ä–∞—Ç—å')
def play_game(message):
    """–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã"""
    difficulty = user_data[message.chat.id]['difficulty']
    question, correct_answer, options = generate_question(difficulty)
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(*[types.KeyboardButton(str(option)) for option in options])
    bot.send_message(message.chat.id, f"–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {question}?", reply_markup=markup)
    bot.register_next_step_handler(message, check_answer, correct_answer)

def check_answer(message, correct_answer):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö"""
    user = user_data[message.chat.id]
    try:
        if int(message.text) == correct_answer:
            user['current_streak'] += 1
            user['score'] = max(user['score'], user['current_streak'])
            user['max_score'] = max(user['max_score'], user['current_streak'])
            
            # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥—Ä—è–¥
            if user['current_streak'] % 3 == 0:
                user['difficulty'] += 1
            
            sticker = random.choice(praise_stickers)
            bot.send_sticker(message.chat.id, sticker)
            bot.send_message(message.chat.id, f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü, {message.from_user.first_name}! üéâ\n–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {user['current_streak']}\n–¢–≤–æ–π —Ä–µ–∫–æ—Ä–¥: {user['max_score']}\n–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {user['difficulty']}")
        else:
            bot.send_message(message.chat.id, f"–ù–µ —Å–æ–≤—Å–µ–º –≤–µ—Ä–Ω–æ, –Ω–æ —Ç—ã –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ —Å—Ç–∞—Ä–∞–µ—à—å—Å—è! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}.")
            user['current_streak'] = 0
            user['difficulty'] = 1  # –°–±—Ä–æ—Å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.")
    
    play_game(message)

@bot.message_handler(func=lambda message: message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def show_stats(message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = user_data.get(message.chat.id, {"score": 0, "max_score": 0, "difficulty": 1})
    bot.send_message(message.chat.id, f"–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {user['score']}\n–†–µ–∫–æ—Ä–¥: {user['max_score']}\n–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {user['difficulty']}", reply_markup=get_main_keyboard())

@bot.message_handler(func=lambda message: message.text == '–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
def reset_stats(message):
    """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data[message.chat.id] = {
        "score": 0,
        "max_score": 0,
        "current_streak": 0,
        "difficulty": 1
    }
    bot.send_message(message.chat.id, "–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞.", reply_markup=get_main_keyboard())

bot.polling()